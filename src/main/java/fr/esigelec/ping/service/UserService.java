package fr.esigelec.ping.service;

import fr.esigelec.ping.model.Link;
import fr.esigelec.ping.model.User;
import fr.esigelec.ping.repository.LinkRepository;
import fr.esigelec.ping.repository.UserRepository;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import fr.esigelec.ping.model.enums.Role;
import fr.esigelec.ping.repository.LinkRepository;
import fr.esigelec.ping.repository.UserRepository;

import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;


@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private LinkRepository linkRepository;

    @Autowired
    private LinkService linkService;

    // üîç R√©cup√©rer tous les utilisateurs
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // üîç R√©cup√©rer un utilisateur par son ID
    public User getUserById(int userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("L'utilisateur avec l'ID " + userId + " n'existe pas."));
    }

    // ‚úÖ V√©rifier si un utilisateur existe par email
    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }

    // ‚úÖ Enregistre un utilisateur avec v√©rification du r√¥le
    public User registerUser(User user) {
        // üîí Hashage du mot de passe
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        //Mettre l'id
        user.setId(generateUniqueUserId());

        // ‚úÖ V√©rifier le r√¥le
        if (!Role.isValidRole(user.getRole().name())) {
            throw new IllegalArgumentException("R√¥le invalide : " + user.getRole());
        }

        return userRepository.save(user);
    }
    
     // ‚úÖ M√©thode de connexion
     public Optional<User> login(String email, String password) {
        // üîç V√©rifier si l'utilisateur existe par email
        Optional<User> userOpt = userRepository.findByEmail(email);

        if (userOpt.isPresent()) {
            User user = userOpt.get();

            // üîí V√©rifier si le mot de passe correspond au hash stock√©
            if (passwordEncoder.matches(password, user.getPassword())) {
                return Optional.of(user);  // ‚úÖ Connexion r√©ussie
            }
        }
        return Optional.empty();  // ‚ùå Identifiants invalides
    }

    // ‚ùå Supprimer un utilisateur
    public void deleteUser(int userId) {
        if (!userRepository.existsById(userId)) {
            throw new IllegalArgumentException("L'utilisateur avec l'ID " + userId + " n'existe pas.");
        }
        userRepository.deleteById(userId);
    }

    //Student par email
    public User findStudentByEmail(String email) {
        // R√©cup√©rer l'utilisateur par email
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new IllegalArgumentException("Utilisateur avec l'email " + email + " introuvable."));

        // V√©rifier que le r√¥le est "STUDENT"
        if (user.getRole() != Role.PATIENT) {
            throw new IllegalArgumentException("L'utilisateur avec l'email " + email + " n'est pas un √©tudiant.");
        }

        return user; // ‚úÖ Retourne l'utilisateur trouv√©
    }

    //Chercher des √©tudiants
    public List<User> searchStudents(String searchTerm) {
        return userRepository.findByUsernameContainingOrEmailContaining(searchTerm, searchTerm);
    }

     

    public List<User> getStudentsByTeacher(int teacherId) {
        // V√©rifier que teacherId est valide
        if (teacherId <= 0) {
            throw new IllegalArgumentException("teacherId doit √™tre un entier positif.");
        }
    
        System.out.println("R√©cup√©ration des √©l√®ves pour l'enseignant avec teacherId : " + teacherId);
    
        // R√©cup√©rer tous les liens entre les enseignants et les √©l√®ves
        List<Link> links = linkRepository.findLinksByTeacherId(teacherId);
    
        // V√©rifiez si des liens ont √©t√© trouv√©s pour l'enseignant
        if (links.isEmpty()) {
            System.out.println("Aucun lien trouv√© pour cet enseignant.");
            return List.of(); // Retourner une liste vide si aucun √©l√®ve n'est associ√©
        }
    
        // Extraire les IDs des √©l√®ves associ√©s √† l'enseignant
        List<Integer> studentIds = links.stream()
                                        .map(Link::getLinkedTo) // Utiliser le getter pour r√©cup√©rer l'ID de l'√©l√®ve
                                        .collect(Collectors.toList());
    
        System.out.println("IDs des √©l√®ves trouv√©s : " + studentIds);
    
        // Rechercher les √©tudiants dans la base de donn√©es avec les IDs r√©cup√©r√©s
        List<User> students = userRepository.findAllByIds(studentIds);
    
        System.out.println("√âl√®ves r√©cup√©r√©s : " + students);
    
        return students;
    }

     // m√©thode dans le service pour rechercher un √©tudiant par email et l'associer √† un enseignant.
    public User findAndLinkStudent(int teacherId, String studentEmail) {
        // Trouver l'√©tudiant par email
        User student = userRepository.findByEmail(studentEmail)
                .orElseThrow(() -> new RuntimeException("Aucun √©tudiant trouv√© avec cet email : " + studentEmail));

        // V√©rifiez si une association existe d√©j√†
        boolean isAlreadyLinked = linkRepository.existsByLinkedToAndLinkerId(student.getId(), teacherId);
        if (isAlreadyLinked) {
            throw new RuntimeException("L'√©tudiant est d√©j√† associ√© √† cet enseignant.");
        }

        // Cr√©ez une nouvelle association
        linkService.createLink(teacherId, student.getId());
        

        return student;
    }

    


    
    // üîç Recherche progressive des utilisateurs par pr√©fixe de username
    public List<User> searchUsersByUsername(String prefix) {
        return userRepository.findByUsernameStartingWith(prefix);
    }

    



    // üîÑ G√©n√©ration d'un ID unique pour le message
    private int generateUniqueUserId() {
        int id;
        do {
            id = (int) (Math.random() * 100000);
        } while (userRepository.existsById(id));
        return id;
    }
    
}
